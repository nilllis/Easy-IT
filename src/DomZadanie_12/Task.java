package DomZadanie_12;


//  Методы запуска нитей. Задача запустить нить двумя способами.
//  Нить должна печатать свое имя с несколько раз с определенным интервалом в предоставляемый канал вывода (Интерфейс NamePrinter).
//
//  Исполнитель задач(Background Threads). Имеется два вида задач: копирование фалов и поиск файлов на диске,
//  которые должны исполняться в фоновом режиме. Нужно создать исполнитель таких задач Executor.
//  В системе может быть запущенно несколько исполнителей.
//  Основная нить программы добавляет задачи в очередь TasksStorage, а любой из исполнителей может взять одну из них оттуда TasksStorage.get,
//  при этом задача должна, должна быть удалена из очереди. В случае неудачного исполнения задача должна вернуться в очередь TasksStorage.add
//  и счетчик попыток у задачи должен быть увеличен, далее она может повторно уйти на исполнение.
//  Если задача не выполнилась корректно 5 раз, исполнитель не должен возвращать её в очередь.
//  Нужно создать 3 исполнителя, добавить в очередь 3-4 задач для копирования больших файлов и 5-10 задач для поиска файлов на диске.
//  Затем нужно запустить все исполнители. Основная нить должна дождаться пока исполнители выполнят все задачи, корректно остановить их и
//  завершиться самому. Кроме основной нити задачи могут добавляться и из других нитей в системе.
//
//        Пошаговые действия!!!!!!!!
//        1.Исследовать интерфейсы Task, CopyFileTask, FindFilesTask.
//        2.Создать имплементацию интерфейсов CopyFileTask, FindFilesTask.
//        3.Исследовать и создать имплементацию для интерфейса TasksStorage
//        4.Исследовать и создать имплементацию для интерфейса Executor, который с периодичностью 100 мс проверяет
//          в очереди наличие задач и исполняет их.
//        5.Создать главную нить и запустить программу на выполнение

/**
 * Интерфейс абстрактной задачи.
 */
public interface Task {

    /**
     * Возвращает количество попыток исполнения задачи
     *
     * @return количество попыток исполнения задачи
     */
    int getTryCount();

    /**
     * Увеличить количество попыток исполнения задачи на 1.
     */
    void incTryCount();

    /**
     * Метод, который исполняет задачу.
     *
     * @throws TaskExecutionFailedException если задача не была выполнена корректно
     */
    void execute() throws TaskExecutionFailedException;
}

